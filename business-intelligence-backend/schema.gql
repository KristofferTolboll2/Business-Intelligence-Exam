# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
  biography: String!
  age: Float!
  goal: goal!
  tasks: [Task!]!
}

enum goal {
  MENTAL_HEALTH
  PUNCTUAL
  MEET_PEOPLE
}

type Task {
  id: ID!
  title: String!
  taskCreatedAt: DateTime!
  completedAt: DateTime
  expirationDate: DateTime
  description: String!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  users: [User!]!
  userById(id: String!): User!
  userWithTasks(id: String!): User!
  getTasksByUserId(userId: String!): [Task!]!
  getInitialTasks(userId: String!): [Task!]!
  getTasksAfterDate(date: String!, userId: String!): [Task!]!
  getRelevantTasks(input: GetRelevantTasksInput!): [Task!]!
}

input GetRelevantTasksInput {
  userId: String!
  limit: Float!
  type: taskType!
}

enum taskType {
  MOST_RELEVANT
  NOT_COMPLETED
  COMPLETED
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!, id: String!): User!
  createTask(input: CreateTaskInput!): Task!
  completeTask(id: String!): Task!
}

input CreateUserInput {
  username: String!
  firstName: String!
  lastName: String!
  biography: String!
  age: Int!
  goal: goal!
}

input UpdateUserInput {
  username: String
  firstName: String
  lastName: String
  biography: String
  age: Int
  goal: goal
}

input CreateTaskInput {
  title: String!
  description: String!
  user: String!
  expirationDate: String!
}
